{"version":3,"file":"js/732.10da410c.js","mappings":"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","sources":["webpack://pavel-betiu-portfolio/./src/components/experiments/cscl/cscl-converters.ts","webpack://pavel-betiu-portfolio/./src/components/widgets/Table.vue","webpack://pavel-betiu-portfolio/./src/components/widgets/Table.vue?67eb","webpack://pavel-betiu-portfolio/./src/views/ProcessingQueueView.vue","webpack://pavel-betiu-portfolio/./src/services/processing-queue-service.ts","webpack://pavel-betiu-portfolio/./src/views/ProcessingQueueView.vue?fa01"],"sourcesContent":["import { CsclResult, CsclEdge, CsclScores, CsclContribution } from \"@/data-objects/cscl-result\";\nimport { CircularGraphInput, CircularGraphCategory, CircularGraphLink, CircularGraphNode } from \"@/components/widgets/circular-graph-input\";\nimport { ForceGraphInput, ForceGraphCategory, ForceGraphLink, ForceGraphNode } from \"@/components/widgets/force-graph-input\";\nimport { StackedLineChartInput } from \"@/components/widgets/stacked-line-chart-input\";\nimport { map } from 'lodash';\nimport { TableInput } from '@/components/widgets/table-input';\nimport { StackedLineGradientGraphInput } from '@/components/widgets/stacked-line-gradient-graph-input';\nimport { ProcessingQueueData } from \"@/data-objects/processing-queue-data\";\n\nexport function convertToCircularGraphInput(data: CsclResult): CircularGraphInput {\n    const circularGraphInput: CircularGraphInput = {\n        nodes: [],\n        links: [],\n        categories: [],\n        legendData: []\n    };\n    circularGraphInput.categories = data.graph.participants.map((participant: string) => {\n        const category: CircularGraphCategory = {\n            name: participant\n        }\n        return category\n    });\n\n    const edges = new Map();\n\n    data.graph.edges.forEach((edge: CsclEdge) => {\n        const source = edge.source;\n        const target = edge.target;\n\n        // Check whether the edge already exists in the opposite direction\n        // (from target to source)\n        const oppositeEdge = edges.get(`${target}-${source}`);\n\n        // If the opposite edge doesn't exist, add the current edge to the map\n        if (!oppositeEdge) {\n            const newEdge = {\n                source: source,\n                target: target,\n                value: Number(edge.weight.toFixed(2)),\n                formatter: `${source} -> ${target}: ${edge.weight.toFixed(2)} <br />`,\n                type: 1 // 1: uni-directional, 2: bi-directional\n            }\n\n            edges.set(`${source}-${target}`, newEdge);\n        } else {\n            // If the opposite edge exists, update the value of the edge\n            // and the formatter\n            oppositeEdge.value += Number(edge.weight.toFixed(2));\n            oppositeEdge.formatter += `${source} -> ${target}: ${edge.weight.toFixed(2)} <br />`;\n            oppositeEdge.type = 2; // 1: uni-directional, 2: bi-directional\n        }\n    });\n\n    circularGraphInput.links = Array.from(edges.values()).map((edge) => {\n        const link: CircularGraphLink = {\n            source: edge.source,\n            target: edge.target,\n            value: edge.value,\n            lineStyle: {\n                curveness: 0.3,\n\n                // If the edge is bi-directional, use a different color (black)\n                color: edge.type === 1 ? 'source' : '#000'\n            },\n            tooltip: {\n                trigger: \"item\",\n                formatter: edge.formatter\n            },\n\n            // If the edge is bi-directional, use arrows on both ends\n            symbol: edge.type === 1 ? [\"none\", \"arrow\"] : [\"arrow\", \"arrow\"],\n\n            // On emphasis, increase the width of the line and make it more opaque\n            emphasis: {\n                lineStyle: {\n                    width: 1.5,\n                    opacity: 1\n                }\n            }\n        }\n        return link\n    });\n\n    circularGraphInput.legendData = data.graph.participants;\n\n    circularGraphInput.nodes = data.graph.participants.map((participant: string) => {\n        const node: CircularGraphNode = {\n            category: circularGraphInput.categories.findIndex((category: CircularGraphCategory) => category.name === participant),\n            id: participant,\n            label: {\n                show: true\n            },\n            name: participant,\n            symbolSize: (data.participants[participant][\"CNAIndices.OUTDEGREE\"] + data.participants[participant][\"CNAIndices.INDEGREE\"]) / 33,\n            value: Number((data.participants[participant][\"CNAIndices.OUTDEGREE\"] + data.participants[participant][\"CNAIndices.INDEGREE\"]).toFixed(2)),\n            tooltip: {\n                trigger: \"item\",\n                formatter: `{b} <br /> In-degree + Out-degree = {c}`\n            }\n        }\n        return node\n    });\n    return circularGraphInput;\n}\n\nexport function convertToForceGraphInput(data: CsclResult): ForceGraphInput {\n    function getNodes(participants: Record<string, CsclScores>, categories: ForceGraphCategory[]): ForceGraphNode[] {\n        const nodes: ForceGraphNode[] = []\n\n        for (const participant in participants) {\n            const score: CsclScores = participants[participant]\n\n            const node: ForceGraphNode = {\n                category: categories.findIndex(x => x.name === participant),\n                id: participant,\n                name: participant,\n                symbolSize: (score[\"CNAIndices.INDEGREE\"] + score[\"CNAIndices.OUTDEGREE\"]) / 30,\n                value: Number((score[\"CNAIndices.INDEGREE\"] + score[\"CNAIndices.OUTDEGREE\"]).toFixed(2))\n            }\n\n            nodes.push(node)\n        }\n\n        return nodes\n    }\n\n    const forceGraphInput: ForceGraphInput = {\n        categories: data.graph.participants.map((participant: string) => {\n            const category: ForceGraphCategory = {\n                name: participant\n            }\n\n            return category\n        }),\n        links: data.graph.edges.map((edge: CsclEdge) => {\n            const link: ForceGraphLink = {\n                source: edge.source,\n                target: edge.target,\n                value: Number((edge.weight).toFixed(2)),\n                lineStyle: {\n                    width: 1,\n                    curveness: 0.05\n                },\n            }\n\n            return link\n        }),\n        nodes: []\n    }\n\n    forceGraphInput.nodes = getNodes(data.participants, forceGraphInput.categories)\n\n    return forceGraphInput;\n}\n\nexport function convertToContributionsTable(result: CsclResult): TableInput {\n     const input: TableInput = {\n    columns: [\n      {\n        key: 'ref',\n        displayName: 'Reference Identifier',\n      },\n      {\n        key: 'participant',\n        displayName: 'Participant',\n      },\n      {\n        key: 'text',\n        displayName: 'Text',\n      },\n      {\n        key: 'time',\n        displayName: 'Time',\n      },\n      {\n        key: 'importance',\n        displayName: 'Importance',\n      },\n      {\n        key: 'social_kb',\n        displayName: 'Social KB',\n      },\n      {\n        key: 'degree',\n        displayName: 'In Degree / Out Degree',\n      },\n    ],\n    rows: [],\n  };\n  input.rows = map(result.contributions, c => {\n    c.ref = c.ref || c.id;\n    c.importance = Math.round(c.importance * 100) / 100;\n    c.social_kb = Math.round(c.social_kb * 100) / 100;\n    c.degree = `${Math.round(c.in_degree * 100) / 100} / ${Math.round(c.out_degree * 100) / 100}`;\n    return c as Record<string, unknown>;\n  });\n  return input;\n}\n\nexport function convertToParticipantsTable(result: CsclResult): TableInput {\n    const input: TableInput = {\n        columns: [\n            {\n                key: 'name',\n                displayName: 'Name',\n            },\n            {\n                key: 'contributions',\n                displayName: 'Contributions Score',\n            },\n            {\n                key: 'skb',\n                displayName: 'Social KB'\n            },\n            {\n                key: 'outdegree',\n                displayName: 'Outdegree',\n            },\n            {\n                key: 'indegree',\n                displayName: 'Indegree'\n            },\n            {\n                key: 'betweenness',\n                displayName: 'Betweenness'\n            },\n            {\n                key: 'closeness',\n                displayName: 'Closeness'\n            },\n            {\n                key: 'eigenvector',\n                displayName: 'Eigenvector'\n            },\n        ],\n        rows: [],\n    };\n    \n    for (const key in result.participants) {\n        const participant_row = {};\n        participant_row[\"name\"] = key;\n        participant_row[\"contributions\"] = Number(result.participants[key][\"CNAIndices.CONTRIBUTIONS_SCORE\"].toFixed(2));\n        participant_row[\"skb\"] = Number(result.participants[key][\"CNAIndices.SOCIAL_KB\"].toFixed(2));\n        participant_row[\"outdegree\"] = Number(result.participants[key][\"CNAIndices.OUTDEGREE\"].toFixed(2));\n        participant_row[\"indegree\"] = Number(result.participants[key][\"CNAIndices.INDEGREE\"].toFixed(2));\n        participant_row[\"betweenness\"] = Number(result.participants[key][\"CNAIndices.BETWEENNESS\"].toFixed(2));\n        participant_row[\"closeness\"] = Number(result.participants[key][\"CNAIndices.CLOSENESS\"].toFixed(2));\n        participant_row[\"eigenvector\"] = Number(result.participants[key][\"CNAIndices.EIGENVECTOR\"].toFixed(2));\n\n        input.rows.push(participant_row as Record<string, unknown>);\n    }\n\n    return input;\n}\n\nexport function convertToProcessingQueueTable(data: ProcessingQueueData, actions: any[]): TableInput {\n    const input: TableInput = {\n        columns: [\n            {\n                key: 'id',\n                displayName: 'ID',\n            },\n            {\n                key: 'task_type',\n                displayName: 'Task type',\n            },\n            {\n                key: 'params',\n                displayName: 'Params',\n            },\n\n            {\n                key: 'dataset',\n                displayName: 'Dataset',\n            },\n            \n            {\n                key: 'time_submitted',\n                displayName: 'Time submitted'\n            },\n            {\n                key: 'processing_time',\n                displayName: 'Processing time'\n            },\n            {\n                key: 'status',\n                displayName: 'Status',\n            },\n            {\n                key: 'actions',\n                displayName: 'Actions',\n            }\n        ],\n        rows: [],\n    };\n    console.log(data);\n    for (const item of data['jobs']) {\n        const dataset_row = {};\n        dataset_row[\"id\"] = item.id;\n        dataset_row[\"params\"] = item.params;\n        dataset_row[\"dataset\"] = item.dataset;\n        dataset_row[\"task_type\"] = item.type;\n        dataset_row[\"time_submitted\"] = item.submit_time;\n        dataset_row[\"processing_time\"] = item.elapsed_time;\n        dataset_row[\"status\"] = item.status;\n        dataset_row[\"actions\"] = actions;\n        input.rows.push(dataset_row as Record<string, unknown>);\n    }\n    return input;\n}\n\n\n\nexport function convertToStackedLineChartInput(result: CsclResult): StackedLineChartInput {\n    const stackedLineChartInput: StackedLineChartInput = {\n        series: []\n    }\n    // For each participant in the cscl result create a series for the stacked line chart\n    for (const participant of result.graph.participants) {\n        // Initialize the data array for the series and the series\n        const series_data: number[][] = []\n        const series = {\n            name: participant,\n            type: \"line\",\n            step: \"end\",\n            data: series_data,\n            showSymbol: false\n        }\n\n        // Grab the correponding contributions for the participant\n        const contributions = result.contributions.filter(contribution => contribution.participant === participant)\n\n        // Sort the contributions by id\n        contributions.sort((a, b) => a.id - b.id)\n\n        // Cumulative sum of the importance of the contributions\n        let cumulativeImportance = 0\n\n        // For each contribution add the cumulative importance to the series\n        for (const contribution of contributions) {\n            const data = [contribution.id, Number((cumulativeImportance + contribution.importance).toFixed(2))]\n\n            cumulativeImportance += contribution.importance\n            series.data.push(data)\n        }\n        stackedLineChartInput.series.push(series)\n    }\n\n    return stackedLineChartInput\n}\n\nexport function convertToStackedLineGradientGraphInput(result: CsclResult): StackedLineGradientGraphInput {\n    const input: StackedLineGradientGraphInput = {\n        importance: [],\n        social_kb: [],\n        in_degree: [],\n        out_degree: []\n    };\n\n    input.importance = result.contributions.map((contribution: CsclContribution) => {\n        return [contribution.id, Number(contribution.importance.toFixed(2))]\n    });\n\n    input.social_kb = result.contributions.map((contribution: CsclContribution) => {\n        return [contribution.id, Number(contribution.social_kb.toFixed(2))]\n    });\n\n    input.in_degree = result.contributions.map((contribution: CsclContribution) => {\n        return [contribution.id, Number(contribution.in_degree.toFixed(2))]\n    });\n\n    input.out_degree = result.contributions.map((contribution: CsclContribution) => {\n        return [contribution.id, Number(contribution.out_degree.toFixed(2))]\n    });\n\n    return input;\n}\n\n","<template>\n    <p-datatable \n      :value=\"data.rows\" \n      :responsiveLayout=\"isScrollable ? 'scroll' : ''\" \n      :scrollable=\"isScrollable\" \n      :scrollHeight=\"setScrollHeight\"\n      :stripedRows=\"true\" >\n      <p-column\n        v-for=\"col of data.columns\"\n        :field=\"col.key\"\n        :header=\"col.displayName\"\n        :key=\"col.key\"\n        :sortable=\"isSortable\"\n      >\n      <template v-if=\"withCustomBody\" #body=\"{data}\">\n        <slot :rowData=\"data\" :currentColumnData=\"col\" name=\"column\">\n        </slot>\n      </template>\n    </p-column>\n    </p-datatable>\n  </template>\n  \n  <script>\n  import {\n      TableInput\n  } from \"./table-input\";\n  \n  export default {\n    props: {\n      data: TableInput,\n      isScrollable: {\n        type: Boolean,\n        default: true,\n        required: false,\n      },\n      isSortable: {\n        type: Boolean,\n        default: true,\n        required: false,\n      },\n      withCustomBody: {\n        type: Boolean,\n        default: false,\n        required: false,\n      },\n      setScrollHeight: {\n        type: String,\n        default: \"750px\",\n        required: false,\n      },\n    },\n    data() {\n      return {};\n    },\n  };\n  </script>\n","import { render } from \"./Table.vue?vue&type=template&id=370e893f\"\nimport script from \"./Table.vue?vue&type=script&lang=js\"\nexport * from \"./Table.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n<!-- <div class=\"container mt-10\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-lg-8 text-center mx-auto my-auto\">\n            <h1>Processing Queue</h1>\n        </div>\n    </div>\n</div> -->\n<header class=\"bg-gradient-dark\">\n    <div class=\"page-header min-vh-75 relative\" v-bind:style=\"{ 'background-image': 'url(' + require('@/assets/img/curved-images/curved13.jpg') + ')' }\">\n        <span class=\"mask bg-gradient-dark opacity-8\"></span>\n        <div class=\"container\">\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8 text-center mx-auto my-auto\">\n                    <h1 class=\"text-white\">Processing Queue</h1>\n                </div>\n            </div>\n        </div>\n        <div class=\"position-absolute w-100 z-index-1 bottom-0\">\n            <svg class=\"waves\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 24 150 40\" preserveAspectRatio=\"none\" shape-rendering=\"auto\">\n                <defs>\n                    <path id=\"gentle-wave\" d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\" />\n                </defs>\n                <g class=\"moving-waves\">\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"-1\" fill=\"rgba(255,255,255,0.40)\" />\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"3\" fill=\"rgba(255,255,255,0.35)\" />\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"5\" fill=\"rgba(255,255,255,0.25)\" />\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"8\" fill=\"rgba(255,255,255,0.20)\" />\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"13\" fill=\"rgba(255,255,255,0.15)\" />\n                    <use xlink:href=\"#gentle-wave\" x=\"48\" y=\"16\" fill=\"rgba(255,255,255,1)\" />\n                </g>\n            </svg>\n        </div>\n    </div>\n</header>\n<div class=\"container p-9\">\n    <div class=\"card shadow-lg\">\n        <Table :data=\"tableInputData\" :isScrollable=\"true\" :withCustomBody=\"true\">\n            <template #column=\"{ rowData, currentColumnData }\">\n                <div v-if=\"currentColumnData.key == 'id'\">\n                    <a href=\"\">\n                        <span>{{ rowData[currentColumnData.key] }}</span>\n                    </a>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'status'\">\n                    <span :class=\"getStatusClass(rowData[currentColumnData.key])\">{{\n                            getStatusName(rowData[currentColumnData.key])\n                        }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'task_type'\">\n                    <span>{{ getTaskTypeName(rowData[currentColumnData.key]) }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'dataset'\">\n                    <span>{{\n                            checkDatasetnullity(rowData[currentColumnData.key])\n                        }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'time_submitted'\">\n                    <span>{{\n                            convertTimestampToDateAndHour(rowData[currentColumnData.key])\n                        }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'processing_time'\">\n                    <span>{{\n                            convertSecondsToHoursMinutesSeconds(\n                                rowData[currentColumnData.key]\n                            )\n                        }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'params'\">\n                    <span>{{ getParamsbyTaskType(rowData) }}</span>\n                </div>\n\n                <div v-else-if=\"currentColumnData.key == 'actions'\">\n                    <button v-if=\"rowData.status === 3 && rowData.task_type === 3\" class=\"btn btn-primary btn-sm m-1 action-button\" @click=\"\n                            downloadCSV(rowData.id)\n                            \">\n                        Download CSV\n                    </button>\n                    <button v-else-if=\"rowData.status === 3 && rowData.task_type === 1\" class=\"btn btn-primary btn-sm m-1 action-button\" @click=\"\n                            checkModelResults(rowData.id)\n                            \">\n                        Check Result\n                    </button>\n                    <!-- <button v-else-if=\"rowData.status === 3 && rowData.task_type !== 1 && rowData.task_type !== 3\" class=\"btn btn-primary btn-sm m-1 action-button\" @click=\"\n                            rowData.actions[0].action(rowData.id)\n                            \">\n                        Perform Action\n                    </button> -->\n                    <button v-if=\"rowData.status === 3 || rowData.status === 4\" class=\"btn btn-outline-primary btn-sm m-1 action-button\" @click=\"rowData.actions[1].action(rowData.id)\">\n                        Remove Job\n                    </button>\n                </div>\n                <div v-else>\n                    {{ rowData[currentColumnData.key] }}\n                </div>\n            </template>\n        </Table>\n    </div>\n</div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Table from \"@/components/widgets/Table.vue\";\nimport {\n    convertToProcessingQueueTable\n} from \"@/components/experiments/cscl/cscl-converters\";\nimport {\n    ProcessingQueueService\n} from \"@/services/processing-queue-service\";\nimport {\n    inject\n} from \"vue\";\nimport {\n    TOAST_SERVICE\n} from \"@/services/toast-service.interface\";\n\nexport default {\n    name: \"ProcessingQueueView\",\n    data() {\n        return {\n            actions: [{\n                    name: \"Perform action\",\n                    styleClass: \"btn-primary\",\n                    action: this.performAction,\n                },\n                {\n                    name: \"Remove job\",\n                    styleClass: \"btn-outline-danger\",\n                    action: this.deleteJob,\n                },\n            ],\n            tableInputData: [],\n            toastService: inject(TOAST_SERVICE),\n        };\n    },\n    components: {\n        Table,\n    },\n    created() {\n        this.getJobs();\n    },\n    methods: {\n        getJobs() {\n            ProcessingQueueService.getJobsData()\n                .then((data) => {\n                    this.tableInputData = convertToProcessingQueueTable(\n                        data,\n                        this.actions\n                    );\n                })\n                .catch((error) => {\n                    console.log(error);\n                });\n        },\n        checkModelResults(jobId) {\n            this.$router.push({\n                path: `/models`,\n                query: {\n                    filterBy: 'job_id',\n                    jobId: jobId,\n                }\n            });\n        },\n        performAction(id) {\n            // Perform your desired action here, e.g., show a dialog, open a modal, etc.\n            // You can use the \"id\" parameter to identify the row or data related to the clicked action.\n            this.info('Perform action', `Performing action for id: ${id}`);\n        },\n        deleteJob(id) {\n            // Perform the job deletion here based on the \"id\" parameter\n            // Make a POST request to the API endpoint to delete the job\n            ProcessingQueueService.deleteJob(id)\n                .then((response) => {\n                    console.log(response.data); // You can handle the response here if needed\n                    if (response.data.success) {\n                        this.getJobs();\n\n                        // Optionally, you can perform any other actions after deleting the job,\n                        // such as showing a success message or taking any other appropriate action.\n                        console.log(`Job with id ${id} deleted successfully.`);\n                    }\n                })\n                .catch((error) => {\n                    console.error(\"Error deleting job:\", error);\n                    // Handle the error if the API call fails.\n                });\n        },\n        async downloadCSV(jobId) {\n            try {\n                // Make a POST request to the Django endpoint that returns the CSV file\n                const response = await axios.post(\n                    `services/jobs/${jobId}/result`,\n                    null, {\n                        responseType: \"blob\", // Set the response type to blob\n                    }\n                );\n\n                // Default filename if the 'content-disposition' header is not available\n                const defaultFileName = \"download.csv\";\n\n                // Create a Blob object with the response data\n                const blob = new Blob([response.data], {\n                    type: \"text/csv\",\n                });\n\n                // Create a download link and trigger the download\n                const url = URL.createObjectURL(blob);\n\n                // Determine the filename\n                let fileName = defaultFileName;\n                if (response.headers[\"content-disposition\"]) {\n                    const contentDisposition = response.headers[\"content-disposition\"];\n                    const fileNameMatch = contentDisposition.match(\n                        /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/\n                    );\n                    if (fileNameMatch) {\n                        fileName = decodeURIComponent(fileNameMatch[1]);\n                    }\n                }\n\n                // Create a download link and trigger the download\n                const a = document.createElement(\"a\");\n                a.href = url;\n                a.download = fileName;\n                a.click();\n\n                // Release the URL object\n                URL.revokeObjectURL(url);\n            } catch (error) {\n                console.error(\"Error downloading CSV:\", error);\n            }\n        },\n        getStatusClass(status) {\n            if (status == 1) return \"badge bg-warning\";\n            if (status == 2) return \"badge bg-info\";\n            if (status == 3) return \"badge bg-success\";\n            if (status == 4) return \"badge bg-danger\";\n        },\n        getStatusName(status) {\n            if (status == 1) return \"Pending\";\n            if (status == 2) return \"In progress\";\n            if (status == 3) return \"Finished\";\n            if (status == 4) return \"Error\";\n        },\n        getTaskTypeName(task_type) {\n            if (task_type == 1) return \"Pipeline\";\n            if (task_type == 2) return \"CSCL\";\n            if (task_type == 3) return \"Predict\";\n            if (task_type == 4) return \"Indices\";\n            if (task_type == 5) return \"Offensive\";\n            if (task_type == 6) return \"Sentiment\";\n            if (task_type == 7) return \"Diacritics\";\n            if (task_type == 8) return \"Answer generation\";\n            if (task_type == 9) return \"Test generation\";\n            if (task_type == 10) return \"Keywords\";\n        },\n        convertTimestampToDateAndHour(timestamp) {\n            const milliseconds = timestamp * 1000; // Convert timestamp to milliseconds\n            const dateObject = new Date(milliseconds);\n\n            // Extract date and time components\n            const year = dateObject.getFullYear();\n            const month = String(dateObject.getMonth() + 1).padStart(2, \"0\");\n            const day = String(dateObject.getDate()).padStart(2, \"0\");\n            const hours = String(dateObject.getHours()).padStart(2, \"0\");\n            const minutes = String(dateObject.getMinutes()).padStart(2, \"0\");\n            const seconds = String(dateObject.getSeconds()).padStart(2, \"0\");\n\n            const formattedDate = `${year}-${month}-${day}`;\n            const formattedTime = `${hours}:${minutes}:${seconds}`;\n\n            return `${formattedDate} ${formattedTime}`;\n        },\n        convertSecondsToHoursMinutesSeconds(seconds) {\n            const hours = Math.floor(seconds / 3600);\n            const minutes = Math.floor((seconds % 3600) / 60);\n            const seconds_ = Math.floor((seconds % 3600) % 60);\n\n            return `${hours}h ${minutes}m ${seconds_}s`;\n        },\n        checkDatasetnullity(dataset) {\n            if (dataset == null) return \"-\";\n            else return dataset.name;\n        },\n        getParamsbyTaskType(data) {\n            if (data.dataset != null) return \"-\";\n            else {\n                if (data.task_type == 3) return \"Model: \" + data.params.model;\n            }\n        },\n        success(header, footer) {\n            this.toastService && this.toastService.success(footer, header)\n        },\n        info(header, footer) {\n            this.toastService && this.toastService.info(footer, header)\n        },\n        error(header, footer) {\n            this.toastService && this.toastService.error(footer, header)\n        }\n    },\n};\n</script>\n\n<style scoped>\n.action-button {\n    font-size: 0.7rem;\n    padding: 0.5rem;\n    width: 107%;\n}\n</style>\n","import { ProcessingQueueData, GetJobsDataResponse, GetJobDataResponse } from '../data-objects/processing-queue-data';\nimport axios from 'axios';\nexport class ProcessingQueueService {\n  // private static readonly data: ProcessingQueueData = {\n  //   data: [{\n  //     task_type: \"Text Classification\",\n  //     params: \"dataset: My Dataset 1\",\n  //     time_submitted: \"2023-01-01 12:12:03\",\n  //     processing_time: \"-\",\n  //     status: \"pending\"\n  //   },\n  //   {\n  //     task_type: \"CSCL\",\n  //     params: \"language: French\",\n  //     time_submitted: \"2023-02-02 17:22:23\",\n  //     processing_time: \"2 hours\",\n  //     status: \"completed\"\n  //   },\n  //   {\n  //     task_type: \"Text Classification\",\n  //     params: \"dataset: Test Dataset 2\",\n  //     time_submitted: \"2023-01-15 14:11:05\",\n  //     processing_time: \"-\",\n  //     status: \"pending\"\n  //   },\n  //   {\n  //     task_type: \"Text Classification\",\n  //     params: \"dataset: My Dataset 3\",\n  //     time_submitted: \"2023-01-07 19:22:34\",\n  //     processing_time: \"4 hours\",\n  //     status: \"completed\"\n  //   },\n  //   {\n  //     task_type: \"Text Classification\",\n  //     params: \"dataset: Test Dataset 1\",\n  //     time_submitted: \"2023-02-04 20:42:31\",\n  //     processing_time: \"-\",\n  //     status: \"pending\"\n  //   }]\n  // }\n\n  // public static getProcessingQueueData(): ProcessingQueueData {\n  //     return this.data;\n  // }\n\n  public static async getJobsData(): Promise<GetJobsDataResponse> {\n    const result = await axios.post('services/jobs', {});\n    console.log(result.data)\n    return result.data;\n  }\n\n  public static async getJobData(id): Promise<GetJobDataResponse> {\n    const result = await axios.post(`services/job/${id}`, {});\n    console.log(result.data)\n    return result.data;\n  }\n\n  public static async deleteJob(id): Promise<any> {\n    return await axios.post(`services/jobs/${id}/delete`, {});\n  }\n\n  public static async getResult(id): Promise<any> {\n    return await axios.post(`services/jobs/${id}/result`, {});\n  }\n\n}","import { render } from \"./ProcessingQueueView.vue?vue&type=template&id=7e5e03d6&scoped=true\"\nimport script from \"./ProcessingQueueView.vue?vue&type=script&lang=js\"\nexport * from \"./ProcessingQueueView.vue?vue&type=script&lang=js\"\n\nimport \"./ProcessingQueueView.vue?vue&type=style&index=0&id=7e5e03d6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-7e5e03d6\"]])\n\nexport default __exports__"],"names":["convertToCircularGraphInput","data","circularGraphInput","nodes","links","categories","legendData","graph","participants","map","participant","category","name","edges","Map","forEach","edge","source","target","oppositeEdge","get","value","Number","weight","toFixed","formatter","type","newEdge","set","Array","from","values","link","lineStyle","curveness","color","tooltip","trigger","symbol","emphasis","width","opacity","node","findIndex","id","label","show","symbolSize","convertToForceGraphInput","getNodes","score","x","push","forceGraphInput","convertToContributionsTable","result","input","columns","key","displayName","rows","contributions","c","ref","importance","Math","round","social_kb","degree","in_degree","out_degree","convertToParticipantsTable","participant_row","convertToProcessingQueueTable","actions","console","log","item","dataset_row","params","dataset","submit_time","elapsed_time","status","convertToStackedLineChartInput","stackedLineChartInput","series","series_data","step","showSymbol","filter","contribution","sort","a","b","cumulativeImportance","convertToStackedLineGradientGraphInput","_createBlock","_component_p_datatable","$props","responsiveLayout","isScrollable","scrollable","scrollHeight","setScrollHeight","stripedRows","_createElementBlock","_Fragment","_renderList","col","_component_p_column","field","header","sortable","isSortable","withCustomBody","_renderSlot","_ctx","$slots","rowData","currentColumnData","props","TableInput","Boolean","default","required","String","__exports__","render","class","_createElementVNode","xmlns","viewBox","preserveAspectRatio","d","y","fill","_hoisted_2","_hoisted_4","href","_hoisted_1","style","_normalizeStyle","require","_hoisted_6","_hoisted_7","_createVNode","_component_Table","$data","tableInputData","column","_withCtx","_hoisted_8","_hoisted_9","_toDisplayString","_hoisted_10","_normalizeClass","$options","getStatusClass","getStatusName","_hoisted_11","getTaskTypeName","_hoisted_12","checkDatasetnullity","_hoisted_13","convertTimestampToDateAndHour","_hoisted_14","convertSecondsToHoursMinutesSeconds","_hoisted_15","getParamsbyTaskType","_hoisted_16","task_type","onClick","$event","downloadCSV","_hoisted_17","checkModelResults","_hoisted_18","action","_hoisted_19","_hoisted_20","ProcessingQueueService","getJobsData","axios","post","getJobData","deleteJob","getResult","styleClass","this","performAction","toastService","inject","TOAST_SERVICE","components","Table","created","getJobs","methods","then","catch","error","jobId","$router","path","query","filterBy","info","response","success","responseType","defaultFileName","blob","Blob","url","URL","createObjectURL","fileName","headers","contentDisposition","fileNameMatch","match","decodeURIComponent","document","createElement","download","click","revokeObjectURL","timestamp","milliseconds","dateObject","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedDate","formattedTime","floor","seconds_","model","footer"],"sourceRoot":""}