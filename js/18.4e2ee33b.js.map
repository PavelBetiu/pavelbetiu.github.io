{"version":3,"file":"js/18.4e2ee33b.js","mappings":"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","sources":["webpack://pavel-betiu-portfolio/./src/services/models-service.ts","webpack://pavel-betiu-portfolio/./src/utils/converters-utils.ts","webpack://pavel-betiu-portfolio/./src/components/widgets/Table.vue","webpack://pavel-betiu-portfolio/./src/components/widgets/Table.vue?67eb","webpack://pavel-betiu-portfolio/./src/views/ModelsView.vue","webpack://pavel-betiu-portfolio/./src/views/ModelsView.vue?199e","webpack://pavel-betiu-portfolio/./src/views/ModelsView.vue?760c"],"sourcesContent":["import { ModelData, TextPrediction, CSVSubmitResponse } from \"@/data-objects/model-dto\";\nimport axios from \"axios\";\n\nexport class ModelService {\n    async getAllModels(): Promise<ModelData[]> {\n        return await axios.post('pipeline/models')\n    }\n\n    async textPredict(model_id: number, text: string): Promise<TextPrediction[]> {\n        return await axios.post(`pipeline/models/${model_id}/predict`, {text: text})\n    }\n\n    async submitCSV(model_id: number, csvfile: File): Promise<CSVSubmitResponse> {\n        const data = new FormData();\n        data.append('csvfile', csvfile);\n        return await axios.post(`pipeline/models/${model_id}/predict`, data)\n    }\n\n    async downloadFeatures(model_id: number): Promise<Blob> {\n        return await axios.post(`pipeline/models/${model_id}/features`, {}, {responseType: 'blob'})\n    }\n\n    tpred: TextPrediction[] = [\n        {\n            task: \"c1\",\n            result: \"{\\\"l1\\\":0.25, \\\"l2\\\": 0.75}\"\n        },\n        {\n            task: \"c2\",\n            result: \"{\\\"l1\\\":0.6, \\\"l2\\\": 0.4}\"\n        },\n        {\n            task: \"c3\",\n            result: \"0.74\"\n        },\n    ]\n\n    tpred2: TextPrediction[] = [\n        {\n            task: \"c1\",\n            result: \"0.74\"\n        },\n        {\n            task: \"c2\",\n            result: \"0.26\"\n        },\n    ]\n\n    async dummyTextPredict(model_id: number, text: string): Promise<TextPrediction[]> {\n        return new Promise(resolve => setTimeout(() => resolve(this.tpred), 1573));\n    }\n}","import { ModelData, TextPrediction } from \"@/data-objects/model-dto\";\nimport { TableInput } from '@/components/widgets/table-input';\n\ninterface ModelAction {\n    name: string;\n    action: {(id: number): void};\n    styleClass: string | null;\n}\n\nfunction preprocessNumber(value: number): string {\n    if (Number.isInteger(value))\n        return value.toString();\n\n    if (value < 0.001) {\n        return value.toExponential(3);\n    }\n\n    return value.toFixed(3);\n}\n\nexport function convertToModelsTable(data: ModelData[], actions: ModelAction[]): TableInput {\n    const input: TableInput = {\n        columns: [\n            {\n                key: 'model_id',\n                displayName: 'ID',\n            },\n            {\n                key: 'model_dataset',\n                displayName: 'Dataset',\n            },\n            {\n                key: 'model_task_type',\n                displayName: 'Task type',\n            },\n            {\n                key: 'model_params',\n                displayName: 'Parameters',\n            },\n            {\n                key: 'model_metrics',\n                displayName: 'Metrics/Performance',\n            },\n            {\n                key: 'model_action',\n                displayName: 'Actions',\n            },\n        ],\n        rows: [],\n    };\n    \n    for (const d of data) {\n        if (d['type'] === 'TRANSFORMER') {\n            for (const param of Object.keys(d['params'])) {\n                if(typeof d['params'][param] == 'number') {\n                    d['params'][param] = preprocessNumber(d['params'][param]);\n                }\n            }\n\n            for (const metric of Object.keys(d['metrics'])) {\n                if(typeof d['metrics'][metric] == 'number') {\n                    d['metrics'][metric] = preprocessNumber(d['metrics'][metric]);\n                }\n            }\n        }\n\n        if (d['type'] === 'XGBOOST') {\n            for (const params of d['params']) {\n                for (const param of Object.keys(params)) {\n                    if(typeof params[param] == 'number'){\n                        params[param] = preprocessNumber(params[param]);\n                    }\n                }\n            }\n\n\n            for (const metrics of d['metrics']) {\n                for (const metric of Object.keys(metrics)) {\n                    if (typeof metrics[metric] == 'number') {\n                        metrics[metric] = preprocessNumber(metrics[metric]);\n                    }\n                }\n            }\n        }\n\n        const row = {};\n        row['model_id'] = d['id'];\n        row['model_params'] = d['params'];\n        row['model_dataset'] = d['dataset'];\n        row['model_task_type'] = d['type'];\n        row['model_metrics'] = d['metrics'];\n        row['model_action'] = actions;\n\n        input.rows.push(row as Record<string, unknown>);\n    }\n\n    return input;\n}\n\nexport function convertToModelPredictionResultTable(data: TextPrediction[]) {\n    const input: TableInput = {\n        columns: [\n            {\n                key: 'task',\n                displayName: 'Task'\n            },\n            {\n                key: 'result',\n                displayName: 'Result'\n            }\n        ],\n        rows: []\n    }\n\n    for (const d of data) {\n        const row = {};\n        row['task'] = d['task'];\n\n        const parsedResult = JSON.parse(d['result']);\n        let result = {}\n        if (Object.keys(parsedResult).length > 0) {\n            let maxKey: any = null\n            for (const key of Object.keys(JSON.parse(d['result']))) {\n                if (maxKey == null) {\n                    maxKey = key\n                } else if (result[maxKey] < parsedResult[key]) {\n                    maxKey = key\n                }\n                result[key] = parsedResult[key]\n            }\n            result['maxKey'] = maxKey\n        } else {\n            result = parsedResult\n        }\n\n        row['result'] = result;\n\n        input.rows.push(row as Record<string, unknown>);\n    }\n\n    return input\n}","<template>\n    <p-datatable \n      :value=\"data.rows\" \n      :responsiveLayout=\"isScrollable ? 'scroll' : ''\" \n      :scrollable=\"isScrollable\" \n      :scrollHeight=\"setScrollHeight\"\n      :stripedRows=\"true\" >\n      <p-column\n        v-for=\"col of data.columns\"\n        :field=\"col.key\"\n        :header=\"col.displayName\"\n        :key=\"col.key\"\n        :sortable=\"isSortable\"\n      >\n      <template v-if=\"withCustomBody\" #body=\"{data}\">\n        <slot :rowData=\"data\" :currentColumnData=\"col\" name=\"column\">\n        </slot>\n      </template>\n    </p-column>\n    </p-datatable>\n  </template>\n  \n  <script>\n  import {\n      TableInput\n  } from \"./table-input\";\n  \n  export default {\n    props: {\n      data: TableInput,\n      isScrollable: {\n        type: Boolean,\n        default: true,\n        required: false,\n      },\n      isSortable: {\n        type: Boolean,\n        default: true,\n        required: false,\n      },\n      withCustomBody: {\n        type: Boolean,\n        default: false,\n        required: false,\n      },\n      setScrollHeight: {\n        type: String,\n        default: \"750px\",\n        required: false,\n      },\n    },\n    data() {\n      return {};\n    },\n  };\n  </script>\n","import { render } from \"./Table.vue?vue&type=template&id=370e893f\"\nimport script from \"./Table.vue?vue&type=script&lang=js\"\nexport * from \"./Table.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n<div :class=\"$style['body']\">\n    <div class=\"container px-2 py-8\">\n        <label v-if=\"filteredByDataset || filteredByJobId\" class=\"badge rounded-pill bg-primary\">{{ filteredBy() }}</label>\n        <div class=\"card shadow-lg p-2\">\n            <Table v-if=\"tableContent !== null\" :data=\"tableData\" :isScrollable=\"false\" :withCustomBody=\"true\">\n                <template #column=\"{rowData, currentColumnData}\">\n                    <div v-if=\"currentColumnData.key == 'model_action'\" class=\"d-flex flex-column justify-content-between align-items-center\">\n                        <!-- For each row, we need to render a button for each action -->\n                        <div class=\"d-flex h-100 w-100 flex-row justify-content-between align-items-center\">\n                            <div v-for=\"action of rowData.model_action\" :key=\"action.name\" >\n                                <button id=\"model-action-button\" :style=\"action.name ? 'width: 120%' : ''\" :class=\"'btn btn-sm '+ action.styleClass\" @click=\"action.action(rowData.model_id)\"> {{ action.name }} </button>\n                            </div>\n                        </div>\n                        <button v-if=\"rowData.model_task_type == 'XGBOOST'\" id=\"model-action-button\" style=\"width: 100%\" class=\"btn btn-sm btn-light\" @click=\"downloadFeatures(rowData.model_id)\">Download features</button>\n                    </div>\n\n                    <div v-else-if=\"currentColumnData.key == 'model_params'\">\n                        <div id=\"model-params-list\" class=\"overflow-auto\">\n                            <ul v-if=\"rowData.model_task_type == 'XGBOOST'\" class=\"list-group\">\n                                <li v-for=\"[idx, params] of rowData.model_params.entries()\" :key=\"idx\" class=\"list-group-item d-flex flex-column justify-content-center align-items-center\">\n                                    <div v-for=\"param of Object.keys(params)\" :key=\"param\" class=\"d-flex w-100 justify-content-between align-items-center\">\n                                        <h6 id=\"param-key\">{{ param }}</h6>\n                                        <span id=\"param-value\" class=\"badge rounded-pill bg-secondary\">{{ params[param] }}</span>\n                                    </div>\n                                </li>\n                            </ul>\n                            <ul v-else-if=\"rowData.model_task_type == 'TRANSFORMER'\" class=\"list-group\">\n                                <li v-for=\"param of Object.keys(rowData.model_params)\" :key=\"param\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n                                    <h6 id=\"param-key\">{{ param }}</h6>\n                                    <span v-if=\"param === 'features' && JSON.parse(rowData.model_params[param].use === false)\" id=\"param-value\" class=\"badge rounded-pill bg-secondary\">NO</span>\n                                    <span v-else-if=\"param === 'features' && JSON.parse(rowData.model_params[param].use === true)\" id=\"param-value\" class=\"badge rounded-pill bg-secondary\">{{Object.keys(rowData.model_params[param])[1]}}: {{ rowData.model_params[param][Object.keys(rowData.model_params[param])[1]] }}</span>\n                                    <span v-else id=\"param-value\" class=\"badge rounded-pill bg-secondary\">{{ rowData.model_params[param] }}</span>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n\n                    <div v-else-if=\"currentColumnData.key == 'model_metrics'\">\n                        <div id=\"model-metrics-list\" class=\"overflow-auto\">\n                            <ul v-if=\"rowData.model_task_type == 'XGBOOST'\" class=\"list-group\">\n                                <li v-for=\"[idx, metrics] of rowData.model_metrics.entries()\" :key=\"idx\" class=\"list-group-item d-flex flex-column justify-content-center align-items-center\">\n                                    <div v-for=\"metric of Object.keys(metrics)\" :key=\"metric\" class=\"d-flex w-100 justify-content-between align-items-center\">\n                                        <h6 id=\"metric-key\">{{ metric }}</h6>\n                                        <span id=\"metric-value\" class=\"badge rounded-pill bg-secondary\">{{ metrics[metric] }}</span>\n                                    </div>\n                                </li>\n                            </ul>\n                            <ul v-else-if=\"rowData.model_task_type == 'TRANSFORMER'\" class=\"list-group\">\n                                <li v-for=\"metric of Object.keys(rowData.model_metrics)\" :key=\"metric\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n                                    <h6 id=\"metric-key\">{{ metric }}</h6>\n                                    <span id=\"metric-value\" class=\"badge rounded-pill bg-secondary\">{{ rowData.model_metrics[metric] }}</span>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n\n                    <div v-else-if=\"currentColumnData.key == 'model_id'\">\n                        <h6 style=\"font-size: 0.9rem\">{{ rowData.model_id }}</h6>\n                    </div>\n\n                    <div v-else-if=\"currentColumnData.key == 'model_task_type'\">\n                        <h6 style=\"font-size: 0.9rem\">{{ rowData.model_task_type }}</h6>\n                    </div>\n\n                    <div v-else-if=\"currentColumnData.key == 'model_dataset'\">\n                        <h6 style=\"font-size: 0.9rem\">{{ rowData.model_dataset }}</h6>\n                    </div>\n\n                </template>\n            </Table>\n\n            <div v-else class=\"d-flex justify-content-center align-items-center\">\n                <p-progress-spinner/>\n            </div>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\nimport Table from \"@/components/widgets/Table.vue\";\nimport {\n    inject\n} from 'vue';\nimport {\n    DATASETS_SERVICE\n} from \"../services/datasets-service.interface\";\n\nimport {\n    ProjectsAPI\n} from \"@/services/projects-api\"\n\nimport {\n    convertToModelsTable\n} from \"@/utils/converters-utils\";\nimport {\n    ModelService\n} from \"@/services/models-service\";\n\nimport {\n  TOAST_SERVICE\n} from \"@/services/toast-service.interface\"\n\nexport default {\n    name: \"ModelsView\",\n    data() {\n        return {\n            toastService: inject(TOAST_SERVICE),\n            datasetService: null,\n            modelService: null,\n            datasetsInfo: [],\n\n            tableContent: null,\n            actions: [{\n                    name: \"Predict\",\n                    styleClass: \"btn-primary\",\n                    action: (id) => {\n                        let model = this.tableContent.filter((model) => {\n                            return model['id'] === id;\n                        })[0]\n\n                        let modelStr = JSON.stringify(model)\n                        let modelB64 = btoa(modelStr)\n\n                        this.$router.push({\n                            path: `/models/${id}/prediction`,\n                            query: {\n                                data: modelB64\n                            }\n                        })\n                    },\n                },\n                {\n                    styleClass: \"btn-outline-danger btn-circle pi pi-trash\",\n                    action: (id) => {\n                        this.info(\"NOT IMPLEMENTED\", `Delete action for id: ${id}`)\n                    },\n                }\n            ],\n        };\n    },\n    components: {\n        Table,\n    },\n    created() {\n        this.datasetService = inject(DATASETS_SERVICE);\n        this.modelService = new ModelService()\n\n        this.initialize();\n    },\n    computed: {\n        tableData: {\n            get() {\n                return convertToModelsTable(this.tableContent, this.actions);\n            },\n        },\n        filteredByDataset: {\n            get() {\n                if (this.$route.query['filterBy'] && this.$route.query['datasetId']) {\n                    if (this.$route.query['filterBy'] === 'dataset_id'){\n                        return true\n                    }\n                }\n\n                return false\n            }\n        },\n        filteredByJobId: {\n            get() {\n                if (this.$route.query['filterBy'] && this.$route.query['jobId']) {\n                    if (this.$route.query['filterBy'] === 'job_id'){\n                        return true\n                    }\n                }\n\n                return false\n            }\n        },\n    },\n    methods: {\n        initialize() {\n            let datasetId = null\n            if (this.filteredByDataset) {\n                datasetId = Number(this.$route.query['datasetId'])\n            }\n\n            let jobId = null\n            if (this.filteredByJobId) {\n                jobId = Number(this.$route.query['jobId'])\n            }\n\n            this.datasetService.getDatasets().then((response) => {\n                let datasets = response['datasets'];\n\n                datasets = datasets.map((dataset) => {\n                    return {\n                        id: dataset['id'],\n                        name: dataset['name']\n                    }\n                });\n\n                this.datasetsInfo = datasets;\n\n                this.modelService.getAllModels().then((response) => {\n                    let models = response.data\n\n                    if (this.filteredByDataset == true) {\n                        const datasetName = this.datasetsInfo.filter((dataset) => {\n                            return dataset['id'] === datasetId\n                        })[0]['name']\n\n                        models = models.filter((model) => model['dataset'] === datasetName)\n                    }\n\n                    if (this.filteredByJobId == true) {\n                        models = models.filter((model) => model['job_id'] === jobId)\n                    }\n\n                    this.tableContent = JSON.parse(JSON.stringify(models))\n\n                    for (let i = 0; i < this.tableContent.length; i++) {\n                        this.tableContent[i]['metrics'] = JSON.parse(this.tableContent[i]['metrics'])\n                        this.tableContent[i]['params'] = JSON.parse(this.tableContent[i]['params'])\n                    }\n                }).catch((error) => {\n                    this.error(\"Error\")\n                })\n            }).catch((error) => this.error(\"Error\", error));\n        },\n        downloadFeatures(id) {\n            this.modelService.downloadFeatures(id).then((response) => {\n                console.log(response)\n                let blob = new Blob([response.data], {\n                    type: \"application/vnd.ms-excel\"\n                });\n                this.saveAs(blob, \"Feature importance.xlsx\");\n            });\n        },\n        saveAs(blob, filename) {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.style.display = \"none\";\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n            document.body.removeChild(a);\n        },\n        filteredBy() {\n            if (this.filteredByDataset) {\n                return `dataset_id = ${this.$route.query['datasetId']}`\n            }\n\n            if (this.filteredByJobId) {\n                return `job_id = ${this.$route.query['jobId']}`\n            }\n\n            return null\n        },\n        success(header, footer) {\n            this.toastService && this.toastService.success(footer, header)\n        },\n        info(header, footer) {\n            this.toastService && this.toastService.info(footer, header)\n        },\n        error(header, footer) {\n            this.toastService && this.toastService.error(footer, header, -1)\n        }\n    },\n    watch: {\n        '$route.query': function(val, oldVal) {\n            // force reload of page\n            this.initialize()\n        }\n    }\n}\n</script>\n\n<style module>\n.body {\n    background-color: #f8f9fa;\n}\n\n.container {\n    border-radius: 50%;\n}\n</style>\n\n<style scoped>\n#model-metrics-list {\n\tmax-width: 300px;\n\tmax-height: 95px;\n}\n\n#model-params-list {\n\tmax-width: 300px;\n\tmax-height: 95px;\n}\n\n#model-params-list h6 {\n    font-size: 0.8rem;\n}\n\n#model-params-list span {\n    font-size: 0.65rem;\n}\n\n#model-metrics-list h6 {\n    font-size: 0.8rem;\n}\n\n#model-metrics-list span {\n    font-size: 0.65rem;\n}\n\n#param-value {\n    width: 50%;\n    overflow-x: hidden;\n}\n\n#metric-value {\n    width: 50%;\n    overflow-x: hidden;\n}\n\n#param-key {\n    width: 50%;\n    overflow-x: hidden;\n    padding-top: 2%;\n}\n\n#metric-key {\n    width: 50%;\n    overflow-x: hidden;\n    padding-top: 2%;\n}\n\n#model-action-button {\n    font-size: 0.7rem;\n    padding: 0.4rem;\n}\n\n</style>\n","// extracted by mini-css-extract-plugin\nexport default {\"body\":\"ModelsView_body_h2uzn\",\"container\":\"ModelsView_container_xiQP2\"};","import { render } from \"./ModelsView.vue?vue&type=template&id=4ba9d85e&scoped=true\"\nimport script from \"./ModelsView.vue?vue&type=script&lang=js\"\nexport * from \"./ModelsView.vue?vue&type=script&lang=js\"\n\nconst cssModules = {}\nimport style0 from \"./ModelsView.vue?vue&type=style&index=0&id=4ba9d85e&module=true&lang=css\"\ncssModules[\"$style\"] = style0\nimport \"./ModelsView.vue?vue&type=style&index=1&id=4ba9d85e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__cssModules',cssModules],['__scopeId',\"data-v-4ba9d85e\"]])\n\nexport default __exports__"],"names":["ModelService","constructor","_defineProperty","task","result","getAllModels","axios","post","textPredict","model_id","text","submitCSV","csvfile","data","FormData","append","downloadFeatures","responseType","dummyTextPredict","Promise","resolve","setTimeout","this","tpred","preprocessNumber","value","Number","isInteger","toString","toExponential","toFixed","convertToModelsTable","actions","input","columns","key","displayName","rows","d","param","Object","keys","metric","params","metrics","row","push","convertToModelPredictionResultTable","parsedResult","JSON","parse","length","maxKey","_createBlock","_component_p_datatable","$props","responsiveLayout","isScrollable","scrollable","scrollHeight","setScrollHeight","stripedRows","_createElementBlock","_Fragment","_renderList","col","_component_p_column","field","header","sortable","isSortable","withCustomBody","_renderSlot","_ctx","$slots","rowData","currentColumnData","props","TableInput","type","Boolean","default","required","String","__exports__","render","class","id","style","_normalizeClass","$style","_createElementVNode","_hoisted_1","$options","filteredByDataset","filteredByJobId","_hoisted_2","_toDisplayString","filteredBy","_hoisted_3","$data","tableContent","_component_Table","tableData","column","_withCtx","_hoisted_4","_hoisted_5","model_action","action","name","_normalizeStyle","styleClass","onClick","$event","_hoisted_6","model_task_type","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","model_params","entries","idx","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","use","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","model_metrics","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","model_dataset","_hoisted_32","_createVNode","_component_p_progress_spinner","toastService","inject","TOAST_SERVICE","datasetService","modelService","datasetsInfo","model","filter","modelStr","stringify","modelB64","btoa","$router","path","query","info","components","Table","created","DATASETS_SERVICE","initialize","computed","get","$route","methods","datasetId","jobId","getDatasets","then","response","datasets","map","dataset","models","datasetName","i","catch","error","console","log","blob","Blob","saveAs","filename","url","window","URL","createObjectURL","a","document","createElement","display","href","download","body","appendChild","click","revokeObjectURL","removeChild","success","footer","watch","val","oldVal","cssModules"],"sourceRoot":""}